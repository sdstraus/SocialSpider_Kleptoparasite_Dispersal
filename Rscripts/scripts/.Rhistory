grp_l <- vector(mode = "list", length = length(my_k))
dapc_l <- vector(mode = "list", length = length(my_k))
for(i in 1:length(dapc_l)){
set.seed(9)
grp_l[[i]] <- find.clusters(n1.js, n.pca = 40, n.clust = my_k[i])
dapc_l[[i]] <- dapc(n1.js, pop = grp_l[[i]]$grp, n.pca = 40, n.da = my_k[i], glPca = n1.pca.js)
#  dapc_l[[i]] <- dapc(gl_rubi, pop = grp_l[[i]]$grp, n.pca = 3, n.da = 2)
}
my_df <- as.data.frame(dapc_l[[ 1 ]]$ind.coord)
my_df$Group <- dapc_l[[ 1 ]]$grp
head(my_df)
names <- rownames(my_df)
my_df <- cbind(names, my_df)
my_df <- dplyr::full_join(my_df, pop.cleaned.n1.js, by = c("names" = "V1"))
my_pal <- RColorBrewer::brewer.pal(n=6, name = "Dark2")
# drop "_JS"
my_df <- my_df %>% mutate(Nest = stringr::str_remove(Nest, "_JS"))
# drop "_JS"
my_df <- my_df %>%  rename(Nest = V2)
my_df <- my_df %>% mutate(Nest = stringr::str_remove(Nest, "_JS"))
# reorder nest levels
my_df <- my_df %>% mutate(Nest = as.factor(Nest))
levels(my_df$Nest)
my_df$Nest <- factor(my_df$Nest, levels = c("Exi06B","Exi12", "Exi08", "Exi17"))
levels(my_df$Nest)
p2 <- my_df %>%
ggplot(aes(x = LD1, y = LD2, color = Nest)) +
geom_point(size = 3) +
theme_bw() +
scale_color_manual(values=c(my_pal)) +
scale_shape_manual(values=c(16, 17, 23))+
scale_fill_manual(values=c(paste(my_pal, "66", sep = "")))+
# geom_text(aes(label=names), nudge_x=0.3, nudge_y=0.5)+
stat_ellipse(inherit.aes = FALSE, mapping = aes(x = LD1, y = LD2, shape = Group),
level = 0.95, size = 0.5)+
labs(shape = "Group")+
# guides(shape=guide_legend(ncol=2), color = guide_legend(override.aes = list(shape =  15)))+
cowplot::theme_cowplot()
p2
n1.js.plot <- p2
# Get the gtables
gE <- ggplotGrob(n1.all.plot)
gF <- ggplotGrob(n1.js.plot)
gE$widths <- gA$widths ## same width as eximius plots
gF$widths <- gA$widths
# Arrange the two charts.
# The legend boxes are centered
grid.newpage()
jpeg(file = "../../figures/Figure4_01Sept22.jpeg", width = 6, height = 5, units = "in", res = 1000)
grid.arrange(gE, gF, nrow = 2, padding = 2)
dev.off()
# Arrange the two charts.
# The legend boxes are centered
grid.newpage()
jpeg(file = "../../figures/Figure4_02Sept22.jpeg", width = 6, height = 5, units = "in", res = 1000)
grid.arrange(gE, gF, nrow = 2, padding = 2)
dev.off()
library(RColorBrewer)
library(scales)
display.brewer.pal(12, "Dark2)
)
display.brewer.pal(12, "Dark2")
display.brewer.pal(12, "Paired")
brewer.pal(12, "Paired")
library(stringr)
library(vcfR)
library(adegenet)
library(SNPRelate)
library(tidyverse)
library(hierfstat)
library(poppr)
library(dartR)
library(stringr)
gl.exi <- readRDS("../rds/gl.exi.RDS")
pop.data <- read.table("../../pop_maps/eximius_popmap_colony_site_cluster.txt", sep = '\t', header = FALSE)
ploidy(gl.exi) <- 2
#
# # make sure popmap matches genlight individuals
pop.new <- as.data.frame(as.factor(indNames(gl.exi)))
colnames(pop.new)[1] <- "Ind"
cleaned <- levels(pop.new$Ind)
pop.data.cleaned <- pop.data %>% filter(V1 %in% cleaned)
#
# # define population strata
strata_df <- pop.data.cleaned[, c(1, 4, 3, 2)]
strata_df <- strata_df %>%
dplyr::rename(Site = V2, Cluster = V3, Nest = V4)
# how many clusters?
temp <- strata_df
temp$Nest <- as.factor(temp$Nest)
temp$Cluster <- as.factor(temp$Cluster)
temp$Site <- as.factor(temp$Site)
str(temp)
# # some ways to manipulate strata
strata(gl.exi) <- strata_df
head(strata(gl.exi))
nest.site <- (strata(gl.exi, ~Nest/Site)) #show hierarchically
(strata(gl.exi, ~Nest/Site))
length(indNames(gl.exi))
setPop(gl.exi) <- ~Nest
length(popNames(gl.exi))
setPop(gl.exi) <- ~Site
popNames(gl.exi)
exi.js <- popsub(gl.exi, "JatunSacha")
popNames(exi.js)
setPop(exi.js) <- ~Nest
indNames(exi.js)
# gl.exi <- exi.js
# count of how many left after filtering per nest
indNames(exi.js) %>% str_subset("Ex02") %>% length()
exi.archi <- popsub(gl.exi, "Archidona")
setPop(exi.archi) <- ~Nest
popNames(exi.archi)
indNames(exi.archi)
# remove NAs
toRemove <- is.na(glMean(exi.archi, alleleAsUnit = FALSE))
which(toRemove)
exi.archi <- exi.archi[, !toRemove]
indNames(exi.archi) %>% str_subset("Exi_Archi_11.8.5") %>% length()
exi.vl <- popsub(gl.exi, sublist=c("ViaLoreto"))
indNames(exi.vl)
# remove NAs
toRemove <- is.na(glMean(exi.vl, alleleAsUnit = FALSE))
which(toRemove)
exi.vl <- exi.vl[, !toRemove]
setPop(exi.vl) <- ~Nest
popNames(exi.vl)
# have to use genind object
gi.exi <- gl2gi(gl.exi)
strata(gi.exi) <- strata_df
js.exi.gi <- gl2gi(exi.js)
strata(js.exi.gi) <- strata_df %>% filter(Site == "JatunSacha")
archi.exi.gi <- gl2gi(exi.archi)
strata(archi.exi.gi) <- strata_df %>% filter(Site == "Archidona")
vl.exi.gi <- gl2gi(exi.vl)
strata(vl.exi.gi) <- strata_df %>% filter(Site == "ViaLoreto")
## K = 6 ##
tbl=read.table("../../admixture/exi/exi.scaffolds.6.Q")
barplot(t(as.matrix(tbl)), col=getPalette(15), xlab="Individual", ylab="Ancestry", border=NA)
popmap <-  read.table("../../pop_maps/eximius_popmap_colony_site_cluster.txt", sep = '\t', header = FALSE)
popmap <- popmap %>% rename("ind" = "V1", "site" = "V2", "nest" = "V4", "cluster" = "V3")
head(popmap)
names <-gl.exi@ind.names
names2 <- popmap$ind
difference <- setdiff(names2, names)
for(i in 1:length(popmap$ind)){
for(j in 1:length(difference)){
if(popmap$ind[i] == difference[j]){
popmap <- popmap[-i,]
}
}
}
for(i in 1:length(popmap$ind)){
for(j in 1:length(difference)){
if(popmap$ind[i] == difference[j]){
popmap <- popmap[-i,]
}
}
}
exi.df <- cbind(popmap, tbl)
rows <- which(exi.df$ind == "Exi_VL_9.5.01")
exi.df <- exi.df[-rows,]
long.dat <- exi.df %>% pivot_longer(cols = V1:V6, names_to = "Kclust", values_to = "fraction", names_prefix = "V")
# trim "Exi_Archi" off nest names
long.dat <- long.dat %>% mutate(nest = str_remove(nest, "Exi_Archi_"))
# trim "Exi_VL" off nest names
long.dat <- long.dat %>% mutate(nest = str_remove(nest, "Exi_VL_"))
# _JS
long.dat <- long.dat %>% mutate(nest = str_remove(nest, "_JS"))
# get individual #
long.dat$ind.num <- 0
for(i in 1:length(long.dat$site)){
if(long.dat$site[i] == "Archidona"){
long.dat$ind.num[i] <- str_sub(long.dat$ind[i], -2)
}
else if(long.dat$site[i] == "ViaLoreto"){
long.dat$ind.num[i] <- str_sub(long.dat$ind[i], -2)
}
else if(long.dat$site[i] == "JatunSacha"){
long.dat$ind.num[i] <- str_sub(long.dat$ind[i], -2)
}
}
long.dat <- long.dat %>% mutate(ind.num2 = as.numeric(ind.num))
long.dat$ind.num2 <- if_else(long.dat$ind.num2 < 1.0, true = (long.dat$ind.num2*10), false = long.dat$ind.num2)
long.dat <- long.dat %>% mutate(ind.num2 = as.character(ind.num2)) %>%
mutate(site = as.factor(site))
# rename levels within a site
levels(long.dat$site)
levels(long.dat$site) <- c("A", "JS", "VL")
## reorder VL nest order
long.dat <- long.dat %>% mutate(nest = as.factor(nest))
levels(long.dat$nest)
## archidona in numerical order
## via loreto by km
## js north to south/ distance from road
long.dat$nest <- factor(long.dat$nest, levels = c("11.8.1", "11.8.2", "11.8.4",
"11.8.5", "9.5.1", "10.5", "17.5","24.1",
"Bridge.1", "41.2", "Exi06A", "Exi06B", "Exi07",
"Exi11", "Exi12", "Exi02", "Exi10", "Exi05", "Exi08",
"Exi14"))
display.brewer.pal(12, "Paired")
library(RColorBrewer)
display.brewer.pal(12, "Paired")
brewer.pal(12, "Paired")
pal <- c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C")
?scale_fill_manual
exi.admix6 <-  ggplot(long.dat, aes(x=ind.num2, y=fraction, fill=Kclust)) +
geom_bar(stat="identity", position="stack") +
facet_grid(. ~ site + nest, drop=TRUE, space="free", scales="free")+
# theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(fill = "K cluster", y = "Ancestry", x = "Individual")+
scale_fill_manual(values = pal)+
theme(panel.grid=element_blank()) +
theme(axis.title.x=element_blank()) +
theme(axis.text.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
theme(strip.background=element_blank())+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),)+
theme(strip.text.x.top = element_text(angle = 90))
exi.admix6
tbl=read.table("../../admixture/exi_vl/exi_vl_subset2.5.Q")
barplot(t(as.matrix(tbl)), col=brewer.pal(6, "Dark2"), xlab="Individual", ylab="Ancestry", border=NA)
popmap <-  read.table("../../pop_maps/eximius_popmap_colony_site_cluster.txt", sep = '\t', header = FALSE)
popmap <- popmap %>% rename("ind" = "V1", "site" = "V2", "nest" = "V3", "cluster" = "V4") %>%
filter(site == "ViaLoreto")
head(popmap)
names <-exi.vl@ind.names
names2 <- popmap$ind
difference <- setdiff(names2, names)
for(i in 1:length(popmap$ind)){
for(j in 1:length(difference)){
if(popmap$ind[i] == difference[j]){
popmap <- popmap[-i,]
}
}
}
for(i in 1:length(popmap$ind)){
for(j in 1:length(difference)){
if(popmap$ind[i] == difference[j]){
popmap <- popmap[-i,]
}
}
}
exi.vl.df <- cbind(popmap, tbl)
rows <- which(exi.vl.df$ind == "Exi_VL_9.5.01")
exi.vl.df <- exi.vl.df[-rows,]
long.dat.vl <- exi.vl.df %>% pivot_longer(cols = V1:V5, names_to = "Kclust", values_to = "fraction", names_prefix = "V")
# trim "Exi_VL" off nest names
long.dat.vl <- long.dat.vl %>% mutate(nest = str_remove(nest, "Exi_VL_"))
# ## want just last 2 characters of individudal # (e.g. 01, 02)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
long.dat.vl <- long.dat.vl %>% mutate(ind.num = substrRight(ind, 1))
# rename levels within a site
long.dat.vl <- long.dat.vl %>% mutate(site = as.factor(site))
levels(long.dat.vl$site)
levels(long.dat.vl$site) <- c("VL")
long.dat.vl$nest <- as.factor(long.dat.vl$nest)
levels(long.dat.vl$nest )
# reorder levels
long.dat.vl$nest <- factor(long.dat.vl$nest, levels = c("9.5", "10.5", "17.5","24.1",
"Bridge.1", "41.2"))
RColorBrewer::display.brewer.pal(12, "Paired")
RColorBrewer::brewer.pal(12, "Paired")
pal <- c("#FDBF6F", "#FF7F00", "#CAB2D6", "#6A3D9A", "#B15928")
exi.vl.admix <-  ggplot(long.dat.vl, aes(x=ind.num, y=fraction, fill=Kclust)) +
geom_bar(stat="identity", position="stack") +
facet_grid(. ~ nest + site, drop=TRUE, space="free", scales="free", switch = 'x')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(fill = "K cluster", y = "Ancestry", x = "Individual")+
scale_fill_manual(values = pal)+
theme(panel.grid=element_blank()) +
theme(axis.title.x=element_blank()) +
theme(axis.text.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
theme(strip.background=element_blank())+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),)+
theme(strip.text.x.bottom = element_text(angle = 90))
exi.vl.admix
#
gl.n1 <- readRDS("../rds/gl.n1.RDS")
pop.data.n1 <- read.table("../../pop_maps/n1_popmap_colony_site_cluster.txt", sep = '\t', header = FALSE)
# # make sure popmap matches genlight individuals
pop.new.n1 <- as.data.frame(as.factor(indNames(gl.n1)))
colnames(pop.new.n1)[1] <- "Ind"
cleaned <- levels(pop.new.n1$Ind)
pop.data.cleaned.n1 <- pop.data.n1 %>% filter(V1 %in% cleaned)
strata_df_n1 <- pop.data.cleaned.n1
strata_df_n1 <- strata_df_n1 %>%
dplyr::rename(Nest = V2, Site = V4, Cluster = V3)
strata(gl.n1) <- strata_df_n1
head(strata(gl.n1))
# have to use genind object
gi.n1 <- gl2gi(gl.n1)
strata(gi.n1) <- strata_df_n1
tbl=read.table("../../admixture/f1/f1.scaffolds.5.Q")
barplot(t(as.matrix(tbl)), col=brewer.pal(6, "Dark2"), xlab="Individual", ylab="Ancestry", border=NA)
popmap <-  read.table("../../pop_maps/n1_popmap_colony_site_cluster.txt", sep = '\t', header = FALSE)
popmap <- popmap %>% rename("ind" = "V1", "nest" = "V2", "cluster" = "V3", "site" = "V4")
head(popmap)
names <-gl.n1@ind.names
names2 <- popmap$ind
difference <- setdiff(names2, names)
for(i in 1:length(popmap$ind)){
for(j in 1:length(difference)){
if(popmap$ind[i] == difference[j]){
popmap <- popmap[-i,]
}
}
}
for(i in 1:length(popmap$ind)){
for(j in 1:length(difference)){
if(popmap$ind[i] == difference[j]){
popmap <- popmap[-i,]
}
}
}
f1.df <- cbind(popmap, tbl)
long.dat <- f1.df %>% pivot_longer(cols = V1:V5, names_to = "Kclust", values_to = "fraction", names_prefix = "V")
# trim "Exi_Archi" off nest names
long.dat <- long.dat %>% mutate(nest = str_remove(nest, "Exi_Archi_"))
# trim "Exi_VL" off nest names
long.dat <- long.dat %>% mutate(nest = str_remove(nest, "Exi_VL_"))
# _JS
long.dat <- long.dat %>% mutate(nest = str_remove(nest, "_JS"))
# get individual #
long.dat$ind.num <- 0
for(i in 1:length(long.dat$site)){
if(long.dat$site[i] == "Archidona"){
long.dat$ind.num[i] <- str_sub(long.dat$ind[i], -2)
}
else if(long.dat$site[i] == "ViaLoreto"){
long.dat$ind.num[i] <- str_sub(long.dat$ind[i], -2)
}
else if(long.dat$site[i] == "JatunSacha"){
long.dat$ind.num[i] <- str_sub(long.dat$ind[i], -2)
}
}
long.dat <- long.dat %>% mutate(ind.num2 = as.numeric(ind.num))
long.dat$ind.num2 <- if_else(long.dat$ind.num2 < 1.0, true = (long.dat$ind.num2*10), false = long.dat$ind.num2)
long.dat <- long.dat %>% mutate(ind.num2 = as.character(ind.num2)) %>%
mutate(site = as.factor(site))
# rename levels within a site
levels(long.dat$site)
levels(long.dat$site) <- c("A", "JS", "VL")
## reorder VL nest order
long.dat <- long.dat %>% mutate(nest = as.factor(nest))
levels(long.dat$nest)
## archidona in numerical order
## via loreto by km
## js north to south/ distance from road
long.dat$nest <- factor(long.dat$nest, levels = c("11.8.1", "11.8.3",
"11.8.5", "9.5.2","24.1", "Exi06B","Exi12",
"Exi02", "Exi08", "Exi17"))
f1.admix <-  ggplot(long.dat, aes(x=ind.num2, y=fraction, fill=Kclust)) +
geom_bar(stat="identity", position="stack") +
facet_grid(. ~ site + nest, drop=TRUE, space="free", scales="free", switch = "x")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(fill = "K cluster", y = "Ancestry", x = "Individual")+
scale_fill_brewer(palette = "Paired")+
theme(panel.grid=element_blank()) +
theme(axis.title.x=element_blank()) +
theme(axis.text.x=element_blank()) +
theme(axis.ticks.x=element_blank()) +
theme(strip.background=element_blank())+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),)+
theme(strip.text.x.bottom = element_text(angle = 90))
f1.admix
bottom  <- ggpubr::ggarrange(exi.vl.admix, f1.admix, labels = c("b", "c"), nrow=1)
top <- ggpubr::ggarrange(exi.admix6, bottom, labels = c("a", ""), nrow=2)
jpeg(file = "../../figures/admixture_plots.jpeg", height = 8, width = 12, units = "in", res = 1000)
top
dev.off()
jpeg(file = "../../figures/Figure5_02Sept22.jpeg", height = 8, width = 12, units = "in", res = 1000)
top
dev.off()
gl.exi <- readRDS("../rds/gl.exi.RDS")
pop.data <- read.table("../../pop_maps/eximius_popmap_colony_site_cluster.txt", sep = '\t', header = FALSE)
#
# # make sure popmap matches genlight individuals
pop.new <- as.data.frame(as.factor(indNames(gl.exi)))
colnames(pop.new)[1] <- "Ind"
cleaned <- levels(pop.new$Ind)
pop.data.cleaned <- pop.data %>% filter(V1 %in% cleaned)
library(stringr)
library(vcfR)
library(adegenet)
library(SNPRelate)
library(tidyverse)
library(hierfstat)
library(poppr)
library(stringr)
library(dartR)
pop.data <- read.table("../../pop_maps/eximius_popmap_colony_site_cluster.txt", sep = '\t', header = FALSE)
ploidy(gl.exi) <- 2
#
# # make sure popmap matches genlight individuals
pop.new <- as.data.frame(as.factor(indNames(gl.exi)))
colnames(pop.new)[1] <- "Ind"
cleaned <- levels(pop.new$Ind)
pop.data.cleaned <- pop.data %>% filter(V1 %in% cleaned)
#
# # define population strata
strata_df <- pop.data.cleaned[, c(1, 4, 3, 2)]
strata_df <- strata_df %>%
dplyr::rename(Site = V2, Cluster = V3, Nest = V4)
# how many clusters?
temp <- strata_df
temp$Nest <- as.factor(temp$Nest)
temp$Cluster <- as.factor(temp$Cluster)
temp$Site <- as.factor(temp$Site)
str(temp)
# # some ways to manipulate strata
strata(gl.exi) <- strata_df
head(strata(gl.exi))
nest.site <- (strata(gl.exi, ~Nest/Site)) #show hierarchically
(strata(gl.exi, ~Nest/Site))
length(indNames(gl.exi))
setPop(gl.exi) <- ~Nest
length(popNames(gl.exi))
indNames(gl.exi)
list <- indNames(gl.exi)
write_lines(list, file = "exi_ind_list.txt")
length(popNames(gl.exi))
length(indNames(gl.exi))
?paste
paste(list, ".*", sep = "")
list <- paste(list, ".*", sep = "")
write_lines(list, file = "exi_ind_list.txt")
library(stringr)
library(vcfR)
library(adegenet)
library(SNPRelate)
library(tidyverse)
library(hierfstat)
library(poppr)
library(stringr)
library(dartR)
setwd("/Users/sam/PhDThesis/GBS/Rscripts/scripts")
pop.data <- read.table("../../pop_maps/eximius_popmap_colony_site_cluster.txt", sep = '\t', header = FALSE)
pop.data <- read.table("../../pop_maps/eximius_popmap_colony_site_cluster.txt", sep = '\t', header = FALSE)
gl.exi <- readRDS("../rds/gl.exi.RDS")
# # make sure popmap matches genlight individuals
pop.new <- as.data.frame(as.factor(indNames(gl.exi)))
colnames(pop.new)[1] <- "Ind"
cleaned <- levels(pop.new$Ind)
pop.data.cleaned <- pop.data %>% filter(V1 %in% cleaned)
#
# # define population strata
strata_df <- pop.data.cleaned[, c(1, 4, 3, 2)]
strata_df <- strata_df %>%
dplyr::rename(Site = V2, Cluster = V3, Nest = V4)
# how many clusters?
temp <- strata_df
temp$Nest <- as.factor(temp$Nest)
temp$Cluster <- as.factor(temp$Cluster)
temp$Site <- as.factor(temp$Site)
str(temp)
# # some ways to manipulate strata
strata(gl.exi) <- strata_df
head(strata(gl.exi))
nest.site <- (strata(gl.exi, ~Nest/Site)) #show hierarchically
(strata(gl.exi, ~Nest/Site))
length(indNames(gl.exi))
setPop(gl.exi) <- ~Nest
length(popNames(gl.exi))
#saveRDS(gl.exi, file="../rds/gl.exi.RDS")
write.csv(pop.data.cleaned, "../data/eximius.pop.data.cleaned.csv")
setPop(gl.exi) <- ~Site
popNames(gl.exi)
exi.js <- popsub(gl.exi, "JatunSacha")
popNames(exi.js)
setPop(exi.js) <- ~Nest
indNames(exi.js)
# gl.exi <- exi.js
# count of how many left after filtering per nest
indNames(exi.js) %>% str_subset("Ex02") %>% length()
pop.data.n1 <- read.table("../../pop_maps/n1_popmap_colony_site_cluster.txt", sep = '\t', header = FALSE)
#
gl.n1 <- readRDS("../rds/gl.n1.RDS")
# # make sure popmap matches genlight individuals
pop.new.n1 <- as.data.frame(as.factor(indNames(gl.n1)))
colnames(pop.new.n1)[1] <- "Ind"
cleaned <- levels(pop.new.n1$Ind)
pop.data.cleaned.n1 <- pop.data.n1 %>% filter(V1 %in% cleaned)
strata_df_n1 <- pop.data.cleaned.n1
strata_df_n1 <- strata_df_n1 %>%
dplyr::rename(Nest = V2, Site = V4, Cluster = V3)
strata(gl.n1) <- strata_df_n1
head(strata(gl.n1))
### subset population ########
indNames(gl.n1) %>% length()
length(indNames(gl.exi))
### subset population ########
indNames(gl.n1) %>% length()
indNames(gl.n1)
# get full list of names -> for full filenames of individuals kept after filtering
n1_list <- indNames(gl.n1)
?writeLines
?write_lines
write_lines(n1_List, file = "n1_list.txt")
# get full list of names -> for full filenames of individuals kept after filtering
n1_list <- indNames(gl.n1)
write_lines(n1_List, file = "n1_list.txt")
write_lines(n1_list, file = "n1_list.txt")
?paste
paste(n1_list, ".*", sep ="")
write_lines(paste(n1_list, ".*", sep =""), file = "n1_list.txt")
